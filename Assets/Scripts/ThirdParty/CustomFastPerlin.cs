using Unity.Burst;
using FNLfloat = System.Single;

namespace Opencraft.ThirdParty
{
    // Static version of managed FastNoise for Perlin noise, so it can be burst compiled.
    // https://github.com/Auburn/FastNoise
    [BurstCompile]
    public static class FastPerlin
    {
        private const int PrimeX = 501125321;
        private const int PrimeY = 1136930381;

        [BurstCompile]
        public static float PerlinGetNoise(FNLfloat x, FNLfloat y, int seed)
        {
            // Transform coordinate
            float mFrequency = 0.01f;
            x *= mFrequency;
            y *= mFrequency;

            FNLfloat SQRT3_1 = (FNLfloat)1.7320508075688772935274463415059;
            FNLfloat F2 = 0.5f * (SQRT3_1 - 1);
            FNLfloat t_1 = (x + y) * F2;
            x += t_1;
            y += t_1;

            // 2D OpenSimplex2 case uses the same algorithm as ordinary Simplex.

            const float SQRT3 = 1.7320508075688772935274463415059f;
            const float G2 = (3 - SQRT3) / 6;

            int i = FastFloor(x);
            int j = FastFloor(y);
            float xi = (float)(x - i);
            float yi = (float)(y - j);

            float t = (xi + yi) * G2;
            float x0 = (float)(xi - t);
            float y0 = (float)(yi - t);

            i *= PrimeX;
            j *= PrimeY;

            float n0, n1, n2;

            float a = 0.5f - x0 * x0 - y0 * y0;
            if (a <= 0) n0 = 0;
            else
            {
                n0 = (a * a) * (a * a) * GradCoord(seed, i, j, x0, y0);
            }

            float c = (float)(2 * (1 - 2 * G2) * (1 / G2 - 2)) * t + ((float)(-2 * (1 - 2 * G2) * (1 - 2 * G2)) + a);
            if (c <= 0) n2 = 0;
            else
            {
                float x2 = x0 + (2 * (float)G2 - 1);
                float y2 = y0 + (2 * (float)G2 - 1);
                n2 = (c * c) * (c * c) * GradCoord(seed, i + PrimeX, j + PrimeY, x2, y2);
            }

            if (y0 > x0)
            {
                float x1 = x0 + (float)G2;
                float y1 = y0 + ((float)G2 - 1);
                float b = 0.5f - x1 * x1 - y1 * y1;
                if (b <= 0) n1 = 0;
                else
                {
                    n1 = (b * b) * (b * b) * GradCoord(seed, i, j + PrimeY, x1, y1);
                }
            }
            else
            {
                float x1 = x0 + ((float)G2 - 1);
                float y1 = y0 + (float)G2;
                float b = 0.5f - x1 * x1 - y1 * y1;
                if (b <= 0) n1 = 0;
                else
                {
                    n1 = (b * b) * (b * b) * GradCoord(seed, i + PrimeX, j, x1, y1);
                }
            }

            return (n0 + n1 + n2) * 99.83685446303647f;
        }

        private static int FastFloor(FNLfloat f)
        {
            return f >= 0 ? (int)f : (int)f - 1;
        }

        private static float GradCoord(int seed, int xPrimed, int yPrimed, float xd, float yd)
        {
            int hash = Hash(seed, xPrimed, yPrimed);
            hash ^= hash >> 15;
            hash &= 127 << 1;

            float xg = Gradients2D[hash];
            float yg = Gradients2D[hash | 1];

            return xd * xg + yd * yg;
        }

        private static int Hash(int seed, int xPrimed, int yPrimed)
        {
            int hash = seed ^ xPrimed ^ yPrimed;

            hash *= 0x27d4eb2d;
            return hash;
        }

        static readonly float[] Gradients2D =
        {
            0.130526192220052f, 0.99144486137381f, 0.38268343236509f, 0.923879532511287f, 0.608761429008721f,
            0.793353340291235f, 0.793353340291235f, 0.608761429008721f,
            0.923879532511287f, 0.38268343236509f, 0.99144486137381f, 0.130526192220051f, 0.99144486137381f,
            -0.130526192220051f, 0.923879532511287f, -0.38268343236509f,
            0.793353340291235f, -0.60876142900872f, 0.608761429008721f, -0.793353340291235f, 0.38268343236509f,
            -0.923879532511287f, 0.130526192220052f, -0.99144486137381f,
            -0.130526192220052f, -0.99144486137381f, -0.38268343236509f, -0.923879532511287f, -0.608761429008721f,
            -0.793353340291235f, -0.793353340291235f, -0.608761429008721f,
            -0.923879532511287f, -0.38268343236509f, -0.99144486137381f, -0.130526192220052f, -0.99144486137381f,
            0.130526192220051f, -0.923879532511287f, 0.38268343236509f,
            -0.793353340291235f, 0.608761429008721f, -0.608761429008721f, 0.793353340291235f, -0.38268343236509f,
            0.923879532511287f, -0.130526192220052f, 0.99144486137381f,
            0.130526192220052f, 0.99144486137381f, 0.38268343236509f, 0.923879532511287f, 0.608761429008721f,
            0.793353340291235f, 0.793353340291235f, 0.608761429008721f,
            0.923879532511287f, 0.38268343236509f, 0.99144486137381f, 0.130526192220051f, 0.99144486137381f,
            -0.130526192220051f, 0.923879532511287f, -0.38268343236509f,
            0.793353340291235f, -0.60876142900872f, 0.608761429008721f, -0.793353340291235f, 0.38268343236509f,
            -0.923879532511287f, 0.130526192220052f, -0.99144486137381f,
            -0.130526192220052f, -0.99144486137381f, -0.38268343236509f, -0.923879532511287f, -0.608761429008721f,
            -0.793353340291235f, -0.793353340291235f, -0.608761429008721f,
            -0.923879532511287f, -0.38268343236509f, -0.99144486137381f, -0.130526192220052f, -0.99144486137381f,
            0.130526192220051f, -0.923879532511287f, 0.38268343236509f,
            -0.793353340291235f, 0.608761429008721f, -0.608761429008721f, 0.793353340291235f, -0.38268343236509f,
            0.923879532511287f, -0.130526192220052f, 0.99144486137381f,
            0.130526192220052f, 0.99144486137381f, 0.38268343236509f, 0.923879532511287f, 0.608761429008721f,
            0.793353340291235f, 0.793353340291235f, 0.608761429008721f,
            0.923879532511287f, 0.38268343236509f, 0.99144486137381f, 0.130526192220051f, 0.99144486137381f,
            -0.130526192220051f, 0.923879532511287f, -0.38268343236509f,
            0.793353340291235f, -0.60876142900872f, 0.608761429008721f, -0.793353340291235f, 0.38268343236509f,
            -0.923879532511287f, 0.130526192220052f, -0.99144486137381f,
            -0.130526192220052f, -0.99144486137381f, -0.38268343236509f, -0.923879532511287f, -0.608761429008721f,
            -0.793353340291235f, -0.793353340291235f, -0.608761429008721f,
            -0.923879532511287f, -0.38268343236509f, -0.99144486137381f, -0.130526192220052f, -0.99144486137381f,
            0.130526192220051f, -0.923879532511287f, 0.38268343236509f,
            -0.793353340291235f, 0.608761429008721f, -0.608761429008721f, 0.793353340291235f, -0.38268343236509f,
            0.923879532511287f, -0.130526192220052f, 0.99144486137381f,
            0.130526192220052f, 0.99144486137381f, 0.38268343236509f, 0.923879532511287f, 0.608761429008721f,
            0.793353340291235f, 0.793353340291235f, 0.608761429008721f,
            0.923879532511287f, 0.38268343236509f, 0.99144486137381f, 0.130526192220051f, 0.99144486137381f,
            -0.130526192220051f, 0.923879532511287f, -0.38268343236509f,
            0.793353340291235f, -0.60876142900872f, 0.608761429008721f, -0.793353340291235f, 0.38268343236509f,
            -0.923879532511287f, 0.130526192220052f, -0.99144486137381f,
            -0.130526192220052f, -0.99144486137381f, -0.38268343236509f, -0.923879532511287f, -0.608761429008721f,
            -0.793353340291235f, -0.793353340291235f, -0.608761429008721f,
            -0.923879532511287f, -0.38268343236509f, -0.99144486137381f, -0.130526192220052f, -0.99144486137381f,
            0.130526192220051f, -0.923879532511287f, 0.38268343236509f,
            -0.793353340291235f, 0.608761429008721f, -0.608761429008721f, 0.793353340291235f, -0.38268343236509f,
            0.923879532511287f, -0.130526192220052f, 0.99144486137381f,
            0.130526192220052f, 0.99144486137381f, 0.38268343236509f, 0.923879532511287f, 0.608761429008721f,
            0.793353340291235f, 0.793353340291235f, 0.608761429008721f,
            0.923879532511287f, 0.38268343236509f, 0.99144486137381f, 0.130526192220051f, 0.99144486137381f,
            -0.130526192220051f, 0.923879532511287f, -0.38268343236509f,
            0.793353340291235f, -0.60876142900872f, 0.608761429008721f, -0.793353340291235f, 0.38268343236509f,
            -0.923879532511287f, 0.130526192220052f, -0.99144486137381f,
            -0.130526192220052f, -0.99144486137381f, -0.38268343236509f, -0.923879532511287f, -0.608761429008721f,
            -0.793353340291235f, -0.793353340291235f, -0.608761429008721f,
            -0.923879532511287f, -0.38268343236509f, -0.99144486137381f, -0.130526192220052f, -0.99144486137381f,
            0.130526192220051f, -0.923879532511287f, 0.38268343236509f,
            -0.793353340291235f, 0.608761429008721f, -0.608761429008721f, 0.793353340291235f, -0.38268343236509f,
            0.923879532511287f, -0.130526192220052f, 0.99144486137381f,
            0.38268343236509f, 0.923879532511287f, 0.923879532511287f, 0.38268343236509f, 0.923879532511287f,
            -0.38268343236509f, 0.38268343236509f, -0.923879532511287f,
            -0.38268343236509f, -0.923879532511287f, -0.923879532511287f, -0.38268343236509f, -0.923879532511287f,
            0.38268343236509f, -0.38268343236509f, 0.923879532511287f,
        };
    }
}